import plugin from "../../../lib/plugins/plugin.js"
import puppeteer from "puppeteer"
import { segment } from "oicq"
import fs from "fs"
import path from "path"

// Author:寂寞沙洲冷
// Url：https://github.com/1638276310/sp-plugin


export class VideoSearch extends plugin {
    constructor() {
        super({
            name: "718吃瓜网视频搜索",
            dsc: "从718吃瓜视频站提取视频m3u8地址和文章内容",
            event: "message",
            priority: "718",
            rule: [
                {
                    reg: "^#?吃瓜更新$",
                    fnc: "processVideoUpdate"
                },
                {
                    reg: "^#?吃瓜\\s*(\\d+)$",
                    fnc: "processVideoSearch"
                },
                {
                    reg: "^#?随机吃瓜$",
                    fnc: "randomVideoSearch"
                },
                {
                    reg: "^#?吃瓜搜索\\s*(\\S+)$",
                    fnc: "processSearchQuery"
                },
                {
                    reg: "^#?吃瓜(\\d+)个往期$",
                    fnc: "getPastArticles"
                }
            ]
        })

        // 定义多个备用URL
        this.videoUrls = [
            "https://risky.zuiniude.xyz",
            "https://cloud.zuiniude.xyz",
            "https://fence.zuiniude.xyz",
            "https://plane.zuiniude.xyz",
            "https://blend.zuiniude.xyz",
        ]
        // 定义排除文章 ID 的列表
        this.excludedArticleIds = [
            19949,18914,18405,18185,16910,16790,14666,13619,12535,12489,
            12395,9999,9278,8819,7859,7293,6998,6692,2307,813,548,521,26,
        ];

        // 加载所有文章ID
        this.allArticleIds = [
                "20180", "20181", "20182", "20183", "20184", //"20185", "20186", "20187", "20188", "20189", "20190", "20191", "20192", "20193", "20194",
                "20165", "20166", "20167", "20168", "20169", "20170", "20171", "20172", "20173", "20174", "20175", "20176", "20177", "20178", "20179",
                "20150", "20151", "20152", "20153", "20154", "20155", "20156", "20157", "20158", "20159", "20160", "20161", "20162", "20163", "20164",
                "20135", "20136", "20137", "20138", "20139", "20140", "20141", "20142", "20143", "20144", "20145", "20146", "20147", "20148", "20149",
                "20134", "20133", "20132", "20131", "20130", "20129", "20128", "20127", "20126", "20125", "20124", "20123", "20111", "20120", "20122", 
                "20121", "20119", "20117", "20116", "20115", "20114", "20113", "20112", "20110", "20109", "20108", "20107", "20079", "20104", "20103", 
                "20102", "20101", "20100", "20099", "20098", "20097", "20096", "20094", "20093", "20092", "20091", "20090", "20089", "20088", "20087", 
                "20086", "20085", "20084", "20083", "20082", "20081", "20080", "20075", "20074", "20073", "20072", "20071", "20070", "20069", "20066", 
                "20064", "20063", "20062", "20058", "20057", "20056", "20055", "20054", "20053", "20048", "20047", "20046", "20045", "20044", "20043", 
                "20040", "20039", "20038", "20037", "20036", "20035", "20034", "20028", "20026", "20025", "19991", "20023", "20022", "20021", "20019", 
                "20020", "20017", "20015", "20013", "20004", "20009", "20008", "20005", "20003", "20002", "19999", "19998", "19997", "19994", "19993", 
                "19990", "19989", "19988", "19987", "19986", "19985", "19984", "19983", "19982", "19980", "19979", "19978", "19977", "19976", "19975", 
                "19973", "19972", "19971", "19970", "19969", "19967", "19968", "19966", "19965", "19964", "19963", "19962", "19961", "19960", "19959", 
                "19958", "19957", "19956", "19954", "19955", "19953", "19952", "19951", "19950", "19949", "19948", "19947", "19946", "19945", "19944", 
                "19943", "19942", "19941", "19940", "19939", "19938", "19937", "19936", "19935", "19934", "19933", "19932", "19931", "19930", "19929", 
                "19928", "19927", "20050", "19926", "19925", "19924", "19923", "19922", "20076", "19921", "19920", "19919", "19918", "19917", "19916", 
                "19915", "19914", "19913", "19912", "19911", "19910", "19909", "19908", "19907", "19906", "20027", "20106", "20105", "20049", "20052", 
                "20067", "19899", "20016", "20014", "19897", "19895", "19886", "19884", "19878", "19893", "19891", "20029", "19889", "20060", "20051", 
                "19876", "19875", "19874", "19870", "19850", "19852", "19866", "19864", "19858", "19856", "19854", "19844", "19842", "19822", "19818", 
                "19835", "19833", "19831", "19803", "19801", "19795", "19809", "19808", "19807", "19806", "19792", "813", "19789", "19787", "19780", 
                "19777", "19772", "19781", "19782", "19765", "19770", "19763", "19759", "19757", "19755", "19751", "19743", "19749", "19741", "19739", 
                "19733", "19723", "19721", "19717", "19719", "19728", "19724", "19725", "19707", "20031", "19712", "19710", "19709", "19705", "19701", 
                "19693", "20010", "19691", "19683", "19703", "19680", "19675", "19669", "19664", "19656", "19667", "19666", "19650", "19648", "19644", 
                "19638", "19630", "19652", "19628", "19626", "19639", "19614", "19610", "19618", "19602", "19598", "19615", "19594", "19587", "14", 
                "19576", "19572", "19584", "19562", "19582", "19580", "19579", "19559", "19557", "19551", "20041", "20065", "19577", "20011", "19563", 
                "20077", "19547", "20032", "19537", "19527", "19544", "19542", "19540", "19518", "19510", "19538", "19530", "19508", "19506", "19504", 
                "19502", "19523", "19522", "19519", "19438", "19432", "19500", "19495", "19496", "19493", "19410", "19408", "19404", "19462", "19426", 
                "19423", "19421", "19354", "19350", "19360", "19400", "19378", "19370", "19343", "19335", "19326", "19324", "19299", "19315", "19309", 
                "19285", "19281", "19275", "19271", "19265", "19255", "19223", "19215", "19213", "19211", "19236", "19224", "19207", "19205", "19201", 
                "19197", "19174", "19172", "19166", "19203", "19193", "19185", "19154", "19140", "19164", "19162", "19160", "19158", "19156", "19131", 
                "19129", "19123", "19119", "19115", "19111", "19109", "19105", "19099", "19093", "19089", "19087", "19083", "19079", "19073", "19069", 
                "19065", "19060", "19059", "19057", "19050", "19048", "19042", "19038", "19036", "19030", "19028", "19022", "19018", "19016", "19010", 
                "19008", "19002", "18998", "18996", "18992", "18988", "18982", "18978", "18974", "18970", "18966", "18964", "18960", "18958", "18956", 
                "18950", "18948", "18946", "18942", "18938", "18936", "18932", "18928", "18930", "18924", "18920", "18918", "18912", "18910", "18908", 
                "18906", "18902", "18900", "18890", "18895", "18893", "18892", "18880", "18878", "18872", "18863", "18869", "18861", "18857", "18855", 
                "18848", "18842", "18838", "18850", "18852", "18835", "18836", "18827", "18821", "18817", "18828", "18810", "18806", "18813", "18802", 
                "18796", "18536", "18792", "18786", "18774", "18778", "18782", "18765", "18761", "18759", "18757", "18755", "18753", "18749", "18747", 
                "18743", "18741", "18735", "18744", "18733", "18729", "18725", "18720", "18716", "18722", "18708", "18706", "18704", "18701", "18695", 
                "18693", "18691", "18683", "18687", "18685", "18679", "18677", "18673", "18670", "18662", "18666", "18664", "18668", "18653", "18651", 
                "18657", "18659", "18646", "18644", "18640", "18648", "18637", "18631", "18633", "18629", "18627", "18602", "18621", "18625", "18617", 
                "18623", "18604", "18600", "18610", "18608", "18606", "18614", "18612", "18598", "18596", "18588", "11986", "16480", "18581", "18567", 
                "18574", "18572", "15821", "18560", "18558", "14357", "18554", "18552", "18550", "18549", "18545", "18546", "17313", "18542", "18540", 
                "18538", "13106", "18532", "18530", "18527", "18525", "18523", "18522", "18520", "18517", "18516", "18514", "18511", "18508", "18504", 
                "18500", "18499", "18498", "18495", "18493", "18486", "18491", "18460", "18485", "18484", "18422", "18477", "18459", "18457", "18454", 
                "18452", "18451", "18449", "18447", "18425", "18429", "18427", "18424", "18420", "18417", "18416", "18413", "18410", "18406", "18403", 
                "18400", "18398", "18395", "18393", "18388", "18386", "18384", "18380", "18376", "18369", "18367", "18382", "18346", "18356", "18354", 
                "18344", "18338", "15100", "16386", "18330", "18324", "18334", "15047", "18322", "18318", "18316", "18314", "15861", "18310", "18308", 
                "18306", "18302", "18298", "18300", "18292", "18284", "18281", "18262", "18258", "18254", "18265", "18251", "18243", "18241", "18229", 
                "18233", "18227", "18225", "18221", "18206", "18204", "18200", "18198", "18194", "18196", "18212", "18178", "18182", "18176", "18171", 
                "18165", "18163", "18174", "18159", "18153", "18149", "18147", "18139", "18135", "18129", "18127", "18121", "18119", "18116", "18106", 
                "18112", "18092", "18108", "18077", "18075", "18102", "18100", "18098", "18096", "18094", "12122", "18090", "18047", "18078", "18069", 
                "18059", "18043", "18013", "18011", "18009", "18007", "18001", "17987", "18005", "18003", "17997", "17971", "17985", "17983", "17981", 
                "17965", "17969", "17978", "17972", "17956", "17954", "17958", "17952", "17940", "17934", "17913", "17496", "17907", "17903", "17885", 
                "17893", "17899", "17880", "17878", "17895", "17887", "17868", "17870", "17872", "17853", "17859", "17861", "17857", "17855", "17844", 
                "17838", "17840", "17832", "17842", "15674", "15713", "17822", "17818", "17828", "17810", "17812", "17816", "17806", "17804", "17802", 
                "17800", "17798", "17795", "17793", "17789", "17787", "17772", "17770", "17768", "17766", "17764", "17762", "17760", "17758", "17756", 
                "17754", "17750", "17748", "17746", "17744", "17742", "17740", "17728", "17734", "17732", "17730", "17726", "17721", "17709", "17713", 
                "17705", "17711", "17701", "17703", "17668", "17690", "17658", "17662", "17681", "17672", "17670", "17666", "17664", "17649", "17643", 
                "17647", "17651", "17628", "17634", "17638", "17640", "17621", "17617", "17611", "17624", "12928", "15383", "15423", "16576", "16903", 
                "17609", "17607", "17605", "17603", "17596", "17592", "17590", "17598", "17600", "17585", "17587", "17577", "17581", "17579", "17575", 
                "17573", "17571", "17569", "17565", "17563", "17559", "17557", "17551", "17549", "17547", "17545", "17543", "17541", "17540", "17538", 
                "17536", "17534", "7783", "17512", "17508", "17510", "17506", "17504", "17502", "17500", "17498", "17492", "17490", "17488", "17486", 
                "17483", "17445", "17468", "17474", "17472", "17470", "17466", "17424", "17434", "17432", "17430", "17428", "17426", "17422", "17415", 
                "17411", "17409", "17407", "17405", "17403", "17401", "17397", "17388", "17386", "17384", "17382", "17380", "17350", "13588", "17369", 
                "17367", "17365", "17363", "17361", "17359", "17357", "17355", "17353", "17321", "17327", "17325", "17323", "17309", "17315", "17311", 
                "17306", "17304", "17302", "17300", "17298", "17296", "16714", "17020", "17257", "17237", "17241", "17265", "12295", "17247", "17235", 
                "17245", "17263", "17259", "17269", "17261", "17267", "17243", "17225", "17223", "17221", "17219", "17217", "17215", "17213", "17211", 
                "17209", "17207", "17205", "17203", "17201", "17199", "17197", "17194", "17192", "17190", "17188", "17186", "17184", "17183", "17181", 
                "17179", "17175", "17173", "17172", "17170", "17168", "17166", "17164", "17162", "17160", "17158", "17156", "17154", "17152", "17151", 
                "17149", "17147", "17145", "17143", "17141", "17139", "17137", "17135", "17133", "17131", "17129", "17127", "17125", "17123", "17121", 
                "17119", "17117", "17115", "17113", "17111", "17109", "17107", "17105", "17101", "17098", "17096", "17094", "17092", "17090", "17088", 
                "17086", "17084", "17081", "17079", "17077", "17075", "17073", "17071", "17069", "17067", "17065", "17049", "17057", "17056", "17055", 
                "17054", "17043", "17051", "17044", "17040", "17038", "17036", "17034", "17030", "17029", "17022", "17018", "17016", "7707", "17013", 
                "17012", "17010", "17007", "17005", "17004", "17002", "17001", "16999", "16996", "16994", "16992", "16990", "16987", "16986", "16984", 
                "16982", "16980", "16964", "16978", "16965", "16962", "16960", "16958", "16956", "16943", "16942", "16940", "16938", "16936", "16935", 
                "16934", "16932", "16926", "16924", "16922", "16919", "16917", "16915", "16913", "16907", "16905", "16887", "16901", "16898", "16896", 
                "16884", "16882", "16880", "16876", "16874", "16872", "16870", "16869", "16866", "16864", "16861", "16859", "16857", "16856", "16853", 
                "16849", "16851", "16847", "16844", "16842", "16836", "8146", "16828", "16826", "16824", "16822", "16821", "16819", "16817", "16815", 
                "16813", "12862", "16811", "16808", "16807", "16805", "16797", "16799", "16798", "16794", "16792", "16782", "16780", "16769", "16778", 
                "16775", "16771", "16767", "16765", "16763", "16760", "16755", "16761", "16757", "16751", "10395", "16753", "16749", "16736", "16733", 
                "16730", "16727", "16725", "16722", "16715", "16712", "16710", "16709", "16706", "16704", "16701", "16695", "16699", "16697", "16694", 
                "16692", "16687", "16685", "16683", "16681", "16679", "16677", "16675", "16672", "16670", "16668", "16666", "16664", "16662", "16660", 
                "16658", "16652", "16655", "16653", "16650", "16648", "16646", "16643", "16642", "16639", "16637", "16635", "16608", "16607", "7908", 
                "16605", "16603", "16590", "16588", "16586", "16577", "16540", "16528", "8864", "16574", "16559", "16522", "16512", "16501", "16499", 
                "16497", "16490", "16484", "16457", "16482", "9060", "16453", "8281", "16452", "16449", "16436", "16434", "16432", "16423", "16414", 
                "16412", "16402", "16401", "16388", "16368", "16376", "16369", "16361", "16356", "16346", "16339", "16337", "16335", "16277", "16325", 
                "16318", "16311", "16299", "16282", "16291", "16272", "16261", "16252", "16250", "16249", "16188", "16243", "16230", "16213", "16204", 
                "16196", "16186", "16173", "16095", "16165", "16154", "16147", "16137", "16126", "16119", "16109", "16103", "16088", "16081", "16073", 
                "16045", "16037", "16036", "16031", "16028", "16026", "16024", "16022", "16020", "16018", "16016", "15960", "16005", "16003", "16001", 
                "15998", "15997", "15995", "15992", "15990", "15983", "15976", "15969", "15949", "15935", "15930", "15924", "15916", "15908", "15900", 
                "15886", "15877", "15868", "15841", "15829", "15813", "15806", "15796", "15790", "15782", "15772", "15765", "15753", "15745", "15741", 
                "15734", "15728", "15723", "15714", "15703", "15682", "15669", "15659", "15642", "15636", "15628", "15622", "15616", "15605", "15600", 
                "15588", "15576", "15554", "15535", "15527", "15522", "15514", "15504", "15492", "15484", "15476", "15470", "15463", "15453", "15447", 
                "15437", "15430", "15411", "15395", "15400", "15377", "15365", "15355", "15348", "15304", "15339", "15317", "15311", "15293", "15277", 
                "15260", "15252", "15231", "15221", "15208", "15201", "15186", "15194", "15174", "15144", "15135", "15129", "15122", "15066", "15107", 
                "15099", "15095", "15085", "14906", "15080", "15056", "15039", "14990", "15019", "15018", "15011", "14997", "14981", "14972", "14963", 
                "14952", "14937", "14935", "14918", "14900", "14896", "14883", "14865", "14860", "14851", "14845", "14825", "14812", "14806", "14768", 
                "14805", "14803", "14801", "14775", "14762", "14761", "14736", "14730", "14717", "14712", "14691", "14701", "14681", "14671", "14571", 
                "14653", "14652", "14650", "14643", "14635", "14613", "14590", "14572", "14588", "14585", "14574", "14554", "14548", "14530", "14537", 
                "14518", "14497", "14496", "14494", "14492", "14485", "14471", "14461", "14447", "14440", "14429", "14413", "14400", "14393", "14392", 
                "14383", "14358", "14343", "14331", "14157", "14322", "14311", "14300", "14285", "14274", "14252", "14244", "14232", "14215", "14204", 
                "14202", "14193", "14183", "14173", "14163", "14139", "14138", "14136", "14131", "14116", "14115", "14108", "14100", "14091", "14075", 
                "14062", "14086", "14016", "14051", "14026", "14004", "13979", "13997", "13989", "13970", "13969", "13959", "13952", "13944", "13934", 
                "13866", "13861", "13851", "13849", "13840", "13830", "13813", "13822", "13803", "13795", "13779", "13764", "13756", "13755", "13734", 
                "13752", "13715", "13714", "13712", "13703", "13702", "13650", "13672", "13666", "13653", "13641", "13635", "13624", "13623", "13621", 
                "13619", "13608", "13574", "13563", "13540", "13536", "13529", "13519", "13398", "13419", "13414", "13412", "13399", "13384", "13383", 
                "13375", "13372", "13363", "13279", "13277", "13268", "13257", "13256", "13254", "13248", "13165", "13147", "13137", "13145", "13142", 
                "13126", "13104", "13080", "13068", "13066", "13053", "13045", "13041", "13039", "13034", "13009", "13020", "12986", "12970", "12959", 
                "12952", "12945", "12930", "12920", "12911", "12909", "12904", "12895", "12894", "12873", "12868", "12860", "12848", "12847", "12835", 
                "12834", "12805", "12812", "12806", "12794", "12779", "12756", "12755", "12747", "12721", "12719", "12708", "12691", "12674", "12669", 
                "12658", "12649", "12630", "12593", "12585", "12561", "12575", "12552", "12533", "12520", "12507", "12506", "9895", "12482", "12478", 
                "12453", "12440", "12432", "12421", "12401", "12395", "12393", "12386", "12364", "12362", "12361", "12343", "12338", "12335", "12333", 
                "12309", "12296", "12293", "12268", "12267", "12254", "12247", "12246", "12244", "12241", "12233", "10921", "8462", "10312", "12223", 
                "12204", "12203", "12175", "12173", "12158", "11972", "12157", "12143", "12141", "12139", "12117", "8350", "12116", "12114", "12110", 
                "7683", "12095", "12094", "12086", "12062", "12051", "9071", "12049", "12048", "12029", "12020", "12019", "12007", "11997", "11977", 
                "11975", "11974", "11968", "11943", "11932", "11923", "11931", "11915", "11906", "11892", "11877", "11866", "11858", "11850", "11841", 
                "11830", "11816", "11815", "11810", "11801", "11789", "11788", "11784", "11778", "11768", "11765", "11761", "11750", "11749", "11739", 
                "11738", "11692", "11724", "11681", "11707", "11696", "11663", "11671", "11655", "11647", "11637", "11632", "11625", "11620", "11614", 
                "11586", "11549", "11542", "11511", "11497", "11490", "11489", "11472", "11446", "11445", "11429", "11421", "11416", "11409", "11402", 
                "11384", "11364", "11353", "11352", "11346", "11337", "7840", "11336", "11331", "11328", "5750", "11325", "11313", "6989", "11312", 
                "6785", "8747", "9886", "11302", "11290", "11279", "11268", "7788", "8080", "6231", "7766", "8193", "7539", "1766", "5734", "8963", 
                "7244", "7404", "8406", "7377", "9673", "9742", "11267", "11259", "11249", "11242", "11231", "11224", "11217", "11205", "11187", "11186", 
                "11180", "11163", "11162", "11155", "11145", "11134", "11119", "11103", "11095", "6383", "11094", "11092", "11086", "11072", "11061", 
                "11052", "11046", "11040", "11035", "11023", "11022", "11006", "11003", "10996", "10986", "10970", "10963", "10954", "10953", "10941", 
                "10940", "10928", "10922", "10909", "10893", "10892", "10885", "10879", "10872", "10839", "10838", "10830", "10829", "10821", "10812", 
                "10797", "10788", "10780", "10772", "10766", "10765", "10750", "10743", "10738", "10727", "10726", "10716", "10693", "10686", "10670", 
                "10656", "10648", "10637", "10607", "10590", "10583", "10582", "10571", "10569", "10561", "10551", "10542", "10532", "10522", "10509", 
                "10502", "10491", "10478", "10460", "10457", "10456", "10437", "10423", "10421", "10415", "10407", "10394", "10374", "10373", "10361", 
                "10356", "10338", "10330", "10320", "10295", "10286", "10272", "10270", "10259", "10258", "10249", "10237", "10236", "10221", "10182", 
                "10197", "10196", "10181", "10168", "10151", "10149", "10141", "10133", "10132", "10117", "10116", "10105", "10080", "10079", "10075", 
                "10073", "10070", "10061", "10060", "7242", "8030", "10047", "10040", "10033", "10022", "10013", "10012", "10006", "9969", "9961", "9949", 
                "9944", "9934", "9933", "9931", "9915", "9914", "9909", "9903", "9901", "9872", "9871", "9860", "9853", "9852", "9846", "9838", "9827", 
                "9822", "9769", "9806", "9799", "9754", "8542", "9749", "9735", "9734", "9722", "9706", "9705", "9699", "9681", "9680", "9675", "9667", 
                "9659", "9648", "9643", "9637", "9622", "9613", "9603", "9591", "9590", "9582", "9569", "9557", "9425", "9424", "9408", "9392", "9384", 
                "9382", "9376", "9361", "9360", "9358", "9356", "9347", "9317", "9323", "9333", "9314", "9303", "9301", "9293", "9284", "9278", "9272", 
                "9270", "9263", "9254", "9247", "9241", "9235", "9224", "9206", "9199", "9183", "9181", "9175", "9174", "9159", "9148", "9136", "9115", 
                "9110", "9100", "9087", "9086", "9061", "9057", "9046", "9032", "9015", "9014", "9012", "9010", "8999", "8993", "8982", "8981", "8968", 
                "8954", "8947", "8946", "8939", "8931", "8924", "8914", "8904", "8893", "8882", "8865", "8859", "8852", "8846", "8839", "8838", "8827", 
                "8805", "8768", "8759", "8753", "8734", "8733", "8727", "8722", "8711", "8707", "8697", "8691", "8689", "8664", "8657", "8655", "8646", 
                "8626", "8624", "8615", "8607", "8600", "8569", "8568", "8552", "8531", "8517", "8510", "8497", "8479", "8473", "8454", "8445", "8432", 
                "8426", "8414", "8373", "8397", "8379", "8372", "8357", "8356", "8341", "8333", "8332", "8327", "8321", "8311", "8307", "8301", "8299", 
                "8293", "8279", "8271", "8260", "8251", "8244", "8239", "8233", "8227", "8218", "8208", "8204", "8200", "8191", "8175", "8155", "8144", 
                "8130", "8126", "8125", "8111", "8109", "8104", "8089", "8079", "8071", "8060", "8054", "8051", "8031", "8023", "8009", "7995", "8002", 
                "8000", "7985", "7971", "7963", "7952", "7940", "7938", "7930", "7924", "7914", "7889", "7866", "7864", "7859", "7853", "7836", "7831", 
                "7828", "7822", "7820", "7817", "7811", "7804", "7802", "7794", "3692", "3521", "5632", "5554", "5826", "363", "7785", "7760", "7473", 
                "7748", "7743", "7741", "7735", "7732", "7725", "7715", "7700", "7676", "7669", "7665", "7657", "7655", "7648", "7643", "7641", "7637", 
                "7632", "7627", "7619", "7617", "7615", "7608", "7598", "7594", "7584", "7579", "7574", "7555", "7550", "7537", "7535", "7533", "7528", 
                "7526", "7524", "7522", "7519", "7506", "7498", "7492", "7487", "7485", "7464", "7462", "7407", "7459", "7457", "7448", "7443", "7437", 
                "7406", "7405", "7427", "7425", "7423", "7394", "7388", "7379", "7375", "7367", "7365", "7359", "7285", "7274", "7267", "7259", "7252", 
                "7245", "7237", "7233", "7216", "7214", "7209", "7187", "7192", "7201", "7178", "665", "560", "1303", "7167", "7160", "7154", "7140", 
                "7132", "7128", "7123", "7121", "7119", "7117", "7111", "7094", "7091", "7085", "7074", "7060", "7054", "7044", "7037", "7028", "7025", 
                "7024", "7022", "7015", "7014", "7012", "7010", "6979", "6972", "6962", "6957", "6955", "6953", "6951", "6949", "6938", "6933", "6923", 
                "6910", "6900", "6893", "6891", "6888", "6886", "6879", "6872", "6864", "6850", "6844", "6842", "6840", "6838", "6836", "6830", "6822", 
                "6820", "6818", "6816", "6814", "6805", "6788", "6787", "6783", "6781", "6762", "6761", "6759", "6757", "6755", "6750", "6739", "6731", 
                "6722", "6707", "6706", "6698", "6679", "6678", "6672", "6666", "6661", "6659", "6657", "6650", "6636", "6635", "6633", "6631", "6592", 
                "6621", "6612", "6604", "6577", "6574", "6573", "6571", "6569", "6568", "6562", "6555", "6554", "6551", "6550", "6538", "6524", "6506", 
                "6504", "6502", "6499", "6492", "6490", "6488", "6486", "6481", "6483", "6473", "6471", "6469", "6457", "5057", "6433", "6431", "6429", 
                "6426", "6424", "6421", "6419", "6411", "6402", "6395", "6385", "6380", "6379", "6377", "6375", "6370", "6362", "6346", "6344", "6342", 
                "6330", "6317", "6315", "6313", "6302", "6292", "6277", "6268", "6260", "6258", "6251", "6249", "6247", "6242", "6233", "6229", "6227", 
                "6219", "6214", "6206", "6196", "6194", "6191", "6186", "6173", "6157", "6149", "6147", "6145", "6127", "6142", "6136", "1152", "6116", 
                "6114", "6112", "6109", "6104", "6102", "6100", "6097", "6083", "6066", "6061", "6050", "6042", "6038", "6035", "6033", "6031", "6029", 
                "6021", "6012", "6001", "5995", "5992", "5989", "5982", "5981", "5972", "5970", "5968", "5966", "5959", "5952", "5947", "5945", "5943", 
                "5941", "5939", "5929", "5924", "5915", "5913", "5910", "5901", "5899", "5897", "5894", "5885", "5880", "5868", "5866", "5864", "5863", 
                "5856", "5851", "5849", "5842", "5837", "5828", "5823", "5822", "5815", "5806", "5804", "5801", "5791", "5767", "5784", "5781", "5780", 
                "5777", "5758", "5744", "5742", "5724", "5733", "5719", "5717", "5715", "5710", "5708", "5705", "5703", "5699", "5693", "5683", "5672", 
                "5666", "5660", "5658", "5656", "5654", "5645", "5640", "5630", "5628", "5620", "5612", "5604", "5598", "5596", "5594", "5591", "5580", 
                "5566", "5558", "5556", "5552", "5543", "5536", "5526", "5518", "5511", "5501", "5499", "5496", "5494", "5492", "5491", "5483", "5472", 
                "5462", "5456", "5449", "5439", "5434", "5412", "5404", "5397", "5390", "5383", "5365", "5363", "5361", "5358", "5351", "5348", "5347", 
                "5345", "5343", "5336", "5327", "5318", "5316", "5314", "5312", "5307", "5305", "5296", "5290", "5288", "5268", "5260", "5258", "5256", 
                "5250", "5243", "5236", "5242", "5240", "5226", "5217", "5215", "5213", "5195", "5188", "5185", "5184", "5182", "5173", "5162", "5160", 
                "5155", "5150", "5144", "5134", "5126", "5124", "5120", "5111", "5109", "5086", "5078", "5074", "5072", "5068", "5066", "5064", "5048", 
                "5038", "5021", "5019", "5017", "5015", "5013", "5006", "5003", "4589", "4728", "4995", "4986", "4978", "4976", "4974", "4964", "4963", 
                "4952", "4950", "4948", "4942", "4933", "4931", "4922", "4921", "4909", "4899", "4883", "4877", "4873", "4867", "4865", "4835", "4834", 
                "4827", "4825", "4823", "4811", "4799", "4797", "4795", "4793", "4781", "4775", "4773", "4758", "4766", "4751", "4732", "4716", "4714", 
                "4712", "4710", "4692", "4685", "4651", "4641", "4637", "4635", "4633", "4621", "4614", "4604", "4579", "4571", "4564", "4556", "420", 
                "4550", "4542", "464", "4534", "4523", "4514", "4507", "4498", "4496", "4494", "4487", "4475", "4470", "4461", "4453", "4451", "4449", 
                "4447", "4445", "4443", "4440", "4433", "4424", "4418", "4411", "4409", "4406", "4404", "4396", "4390", "4388", "4383", "4373", "4365", 
                "4353", "4351", "4349", "4335", "4326", "4324", "4322", "4302", "4301", "4288", "4286", "4284", "4282", "4279", "4265", "4254", "4249", 
                "4247", "4244", "4233", "4231", "4225", "4213", "4211", "4209", "4198", "4196", "4193", "4182", "4153", "4170", "4168", "4148", "4135", 
                "4130", "4121", "4106", "4102", "4097", "4087", "4078", "4070", "4060", "4058", "4046", "4044", "4026", "4024", "4022", "4018", "3989", 
                "3987", "3985", "3981", "3965", "3957", "3948", "3947", "3945", "3940", "3932", "3928", "3926", "3924", "3920", "3914", "3912", "3909", 
                "3901", "3895", "3894", "3880", "3872", "3868", "3869", "3858", "3850", "3840", "3830", "3824", "3813", "3812", "3804", "3801", "3800", 
                "3783", "3791", "3771", "3769", "3766", "3765", "3763", "3755", "3740", "3738", "3730", "3725", "3723", "3717", "3713", "3703", "3696", 
                "3693", "3681", "3673", "3664", "3650", "3644", "3641", "3639", "3638", "3627", "3616", "3614", "3612", "205", "3266", "3590", "3588", 
                "3582", "3564", "3560", "3553", "3551", "3549", "3547", "3545", "3538", "3537", "3535", "3533", "3527", "3515", "3513", "79", "3511", 
                "3504", "3495", "3484", "3482", "3480", "3478", "3470", "3459", "3452", "3444", "3441", "3433", "3416", "3412", "3409", "3408", "3402", 
                "3387", "3370", "3359", "3356", "3325", "3339", "3335", "3326", "3310", "3303", "3301", "3299", "3296", "3274", "3163", "3271", "3154", 
                "3258", "3229", "3228", "3221", "3200", "3187", "3186", "3160", "3147", "3145", "1915", "3143", "3141", "3132", "3122", "3114", "3112", 
                "3110", "3097", "3084", "3082", "3079", "3078", "3070", "3050", "3038", "3067", "3041", "3039", "3029", "3025", "3014", "3012", "1826", 
                "3009", "3000", "2991", "2989", "2978", "2977", "2956", "2964", "2939", "2838", "2931", "2929", "2913", "2909", "2900", "2887", "2870", 
                "2873", "2872", "2861", "2859", "2858", "2851", "1776", "2832", "2822", "2810", "2808", "2796", "2794", "2792", "2734", "2772", "2737", 
                "2728", "2758", "2753", "2746", "2689", "2718", "2677", "2669", "2660", "2624", "2622", "2620", "1588", "2608", "2607", "2605", "2582", 
                "2581", "2555", "2551", "2541", "2538", "2537", "2511", "2509", "2502", "2497", "2473", "2474", "2458", "2433", "2425", "2416", "2407", 
                "2398", "2396", "2393", "2391", "2377", "2378", "2365", "2359", "2358", "2345", "2333", "2329", "2323", "2321", "2314", "2292", "2170", 
                "2207", "2200", "2219", "2276", "2261", "2259", "2257", "2232", "2190", "2187", "2179", "2169", "2167", "2165", "2139", "2120", "2086", 
                "2066", "2085", "2084", "2071", "2070", "2068", "2063", "2061", "2058", "2051", "2040", "2022", "2014", "2003", "1996", "1896", "1959", 
                "1948", "1744", "1935", "1930", "1922", "1909", "1895", "1872", "1870", "1867", "1861", "1852", "1848", "1827", "1817", "1804", "1801", 
                "1793", "1784", "1760", "1750", "1729", "1738", "1721", "1711", "1701", "1683", "1660", "1676", "1670", "1652", "1645", "1629", "1624", 
                "1613", "1604", "1598", "1565", "1559", "1540", "1552", "1547", "1544", "1532", "1522", "1514", "1513", "1506", "1499", "1495", "1489", 
                "1467", "1460", "1455", "1452", "1446", "1443", "1442", "1429", "1428", "1425", "1423", "1418", "1416", "1413", "1411", "1399", "1373", 
                "1363", "1362", "1353", "1346", "1335", "1334", "1330", "508", "1319", "1307", "1302", "1300", "1298", "1291", "1277", "1276", "1253", 
                "1247", "1237", "1230", "1224", "1214", "1221", "1213", "1211", "1209", "1203", "1196", "1187", "1185", "1175", "1170", "1139", "1155", 
                "1154", "1069", "1130", "1121", "1115", "1112", "1109", "1106", "1098", "1104", "1097", "1085", "1074", "1073", "1070", "1052", "1049", 
                "1048", "1044", "1043", "1041", "1035", "1027", "1020", "1014", "1006", "1005", "1003", "996", "995", "992", "987", "986", "984", "977", 
                "973", "966", "958", "950", "949", "938", "931", "922", "921", "919", "910", "901", "898", "896", "888", "882", "872", "869", "854", 
                "844", "840", "838", "828", "811", "826", "820", "810", "808", "790", "787", "786", "781", "779", "776", "771", "754", "749", "740", 
                "734", "732", "725", "723", "721", "716", "711", "705", "704", "692", "687", "682", "671", "669", "655", "648", "646", "638", "602", 
                "636", "628", "624", "618", "612", "608", "606", "603", "593", "582", "576", "573", "572", "553", "551", "548", "546", "536", "521", 
                "515", "501", "487", "480", "459", "452", "435", "426", "408", "404", "398", "393", "391", "384", "378", "370", "365", "361", "359", 
                "357", "351", "345", "336", "330", "326", "319", "314", "301", "299", "297", "291", "277", "270", "268", "259", "253", "244", "237", 
                "227", "222", "211", "196", "185", "180", "178", "175", "173", "171", "169", "167", "165", "157", "151", "146", "113", "108", "100", 
                "73", "37", "36", "35", "34", "33", "32", "31", "30", "29", "28", "27", "26",
        ].filter(id => !this.excludedArticleIds.includes(id));
    }

    async processVideoUpdate(e) {
        // if (!e.isGroup) return
        //保留代码，吃瓜更新命令，后续添加
    }

    // 随机吃瓜功能
    async randomVideoSearch(e) {
        // if (!e.isGroup) return;

        if (this.allArticleIds.length === 0) {
            // await e.reply("没有可用的随机视频ID，请检查文章id", false, { at: true, recallMsg: 60 });
            await e.reply("没有可用的随机视频ID，请检查文章id", false, { at: true, });
            return;
        }

        // 随机选择一个ID
        const randomIndex = Math.floor(Math.random() * this.allArticleIds.length);
        const randomVideoId = this.allArticleIds[randomIndex];

        // await e.reply(`随机选择视频ID: ${randomVideoId}，正在搜索...`, false, { at: true, recallMsg: 60 });
        await e.reply(`随机选择视频ID: ${randomVideoId}，正在搜索...`, false, { at: true, });

        // 调用原有的处理函数
        await this.processVideoSearch({
            ...e,
            msg: `#吃瓜 ${randomVideoId}`
        });
    }

    async processVideoSearch(e) {
        // if (!e.isGroup) return;
        const videoId = e.msg.match(/^#?吃瓜\s*(\S+)$/)?.[1]?.trim();
        if (!videoId) return;
        // await e.reply("正在搜索，请稍等...", false, { at: true, recallMsg: 60 });

        // 将 videoId 转换为数字类型
        const numericVideoId = parseInt(videoId, 10);

        // 检查视频 ID 是否在排除列表中
        if (this.excludedArticleIds.includes(numericVideoId)) {
            // await e.reply("该文章 ID 已被排除，无法搜索。", false, { at: true, recallMsg: 60 });
            await e.reply("该文章 ID 已被排除，无法搜索。", false, { at: true,  });
            return;
        }

        // 检查视频 ID 是否在 allArticleIds 中
        if (!this.allArticleIds.includes(videoId)) {
            await e.reply("该ID不存在", false, { at: true });
            return;
        }

        // await e.reply("正在搜索，请稍等...", false, { at: true, recallMsg: 60 });

        const browser = await puppeteer.launch({
            args: ["--no-sandbox", "--disable-setuid-sandbox"],
            headless: "new"
        })

        let lastError = null

        // 尝试所有备用URL
        for (const baseUrl of this.videoUrls) {
            const url = `${baseUrl}/archives/${videoId}`
            try {
                const page = await browser.newPage()
                await page.setUserAgent(
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                )

                // 允许图片加载
                await page.setRequestInterception(true)
                page.on('request', req => {
                    if (['stylesheet', 'font'].includes(req.resourceType())) {
                        req.abort()
                    } else {
                        req.continue()
                    }
                })

                // 重试逻辑（3次）
                let retries = 3
                while (retries--) {
                    try {
                        await page.goto(url, {
                            timeout: 60000,
                            waitUntil: "networkidle2"
                        })
                        break;
                    } catch (err) {
                        if (retries === 0) throw err;
                        await new Promise(r => setTimeout(r, 60000))
                    }
                }

                // 提取页面信息
                const pageInfo = await page.evaluate(() => {
                    try {
                        const result = {
                            title: null,
                            publishTime: null,
                            videoUrl: null,
                            images: [],
                            articleContent: []
                        }

                        // 提取标题
                        const titleElement = document.querySelector("h1.post-title")
                        if (titleElement) {
                            result.title = titleElement.textContent.trim()
                        }

                        // 提取发布时间
                        const timeElement = document.querySelector("time")
                        if (timeElement) {
                            result.publishTime = timeElement.textContent.trim()
                        }

                        // 提取DPlayer配置中的video.url
                        const dplayer = document.querySelector(".dplayer")
                        if (dplayer) {
                            const config = JSON.parse(dplayer.getAttribute("data-config"))
                            result.videoUrl = config.video?.url || null
                        }

                        // 对于ID≥19949的视频，从video标签获取blob地址
                        if (!result.videoUrl) {
                            const videoElement = document.querySelector("video.dplayer-video")
                            if (videoElement) {
                                result.videoUrl = videoElement.getAttribute("src") || null
                            }
                        }

                        // 提取所有图片的src属性，但排除广告图片
                        const imgElements = document.querySelectorAll('img[src^="blob:"]');
                        imgElements.forEach(img => {
                            // 检查图片是否在广告容器中
                            let isAd = false;
                            let parent = img.parentElement;
                            
                            while (parent) {
                                if (parent.classList) {
                                    // 检查是否在广告容器中
                                    if (parent.classList.contains('horizontal-banner') || 
                                        parent.classList.contains('article-bottom-apps')) {
                                        isAd = true;
                                        break;
                                    }
                                }
                                parent = parent.parentElement;
                            }

                            const imgUrl = img.getAttribute('src');
                            if (imgUrl && !isAd) {
                                result.images.push(imgUrl);
                            }
                        });

                        // 提取并过滤文章内容
                        const excludeKeywords = [
                            
                        ]

                        // 获取所有<p>标签，然后过滤掉在评论区域内的
                        const allPElements = document.querySelectorAll("p")
                        allPElements.forEach((p) => {
                            // 检查是否在评论区域内
                            let isInComment = false
                            let parent = p.parentElement

                            while (parent) {
                                if (
                                    parent.classList &&
                                    parent.classList.contains("comment-content") &&
                                    parent.classList.contains("comment-list") &&
                                    parent.classList.contains("comment-separator")
                                ) {
                                    isInComment = true
                                    break
                                }
                                parent = parent.parentElement
                            }

                            if (!isInComment) {
                                const text = p.textContent.trim()
                                if (
                                    text && text.length > 0
                                ) {
                                    // 检查是否包含排除关键词
                                    const shouldExclude = this.excludeKeywords.some(keyword =>
                                        text.includes(keyword)
                                    );
                                    if (!shouldExclude){
                                        result.articleContent.push(text)
                                    }
                                }
                            }
                        })

                        return result
                    } catch (e) {
                        logger.error("解析页面信息失败:", e)
                        return null
                    }
                })

                if (!pageInfo || !pageInfo.videoUrl) {
                    throw new Error("未找到视频地址")
                }

                // 清理URL
                let cleanUrl = pageInfo.videoUrl
                if (numericVideoId >= 19949) {
                    // 对于blob地址，直接使用
                    cleanUrl = pageInfo.videoUrl
                } else {
                    // 对于普通m3u8地址，进行清理
                    cleanUrl = pageInfo.videoUrl.replace(/\\\//g, "/").split("?")[0]
                }

                // 构建转发消息节点
                const forwardNodes = [];

                // 添加基本信息节点
                forwardNodes.push({
                    user_id: e.user_id,
                    nickname: e.sender.nickname,
                    message: [
                        `✅ 视频m3u8地址获取成功！\n` +
                        `🆔 视频ID: ${videoId}\n` +
                        (pageInfo.title ? ` 📝标题: ${pageInfo.title}\n` : '') +
                        (pageInfo.publishTime ? ` 📅发布时间: ${pageInfo.publishTime}\n` : '') +
                        ` 🔗视频地址:\n${cleanUrl}\n` +
                        ` ℹ️ 请自行下载视频\n` +
                        ` 📛 请勿用于非法用途`
                    ]
                });

                // 添加文章内容节点（如果有内容）
                if (pageInfo.articleContent.length > 0) {
                    forwardNodes.push({
                        user_id: e.user_id,
                        nickname: e.sender.nickname,
                        message: [" 📖文章内容:"]
                    });

                    pageInfo.articleContent.forEach(content => {
                        forwardNodes.push({
                            user_id: e.user_id,
                            nickname: e.sender.nickname,
                            message: [content]
                        });
                    });
                }

                // 添加图片节点（如果有图片）
                if (pageInfo.images && pageInfo.images.length > 0) {
                    forwardNodes.push({
                        user_id: e.user_id,
                        nickname: e.sender.nickname,
                        message: [" 🖼️文章图片:"]
                    });

                    // 获取图片的base64编码并添加到转发消息
                    for (const blobUrl of pageInfo.images) {
                        try {
                            const base64 = await page.evaluate(async (url) => {
                                const response = await fetch(url);
                                const blob = await response.blob();
                                return new Promise((resolve) => {
                                    const reader = new FileReader();
                                    reader.onloadend = () => resolve(reader.result.split(',')[1]);
                                    reader.readAsDataURL(blob);
                                });
                            }, blobUrl);

                            forwardNodes.push({
                                user_id: e.user_id,
                                nickname: e.sender.nickname,
                                message: [segment.image(`base64://${base64}`)]
                            });
                        } catch (imageError) {
                            logger.error('获取图片失败:', imageError);
                        }
                    }
                }

                // 发送转发消息
                const forwardMessage = await Bot.makeForwardMsg(forwardNodes);
                await e.reply(forwardMessage);

                await browser.close();
                return;
            } catch (error) {
                lastError = error;
                logger.error(`尝试URL ${url} 失败:`, error);
            }
        }

        await browser.close();
        // await e.reply(`未找到视频地址，请稍后重试。错误信息: ${lastError.message}`, false, { at: true, recallMsg: 60 });
        await e.reply(`未找到视频地址，请稍后重试。错误信息: ${lastError.message}`, false, { at: true, });
    }

    async processSearchQuery(e) {
        const keyword = e.msg.match(/^#?吃瓜搜索\s*(\S+)$/)?.[1]?.trim();
        if (!keyword) return;
    
        // await e.reply(`正在搜索包含关键词 "${keyword}" 的文章，请稍等...`, false, { at: true, recallMsg: 60 });
        await e.reply(`正在搜索包含关键词 "${keyword}" 的文章，请稍等...`, false, { at: true,  });
    
        const browser = await puppeteer.launch({
            args: ["--no-sandbox", "--disable-setuid-sandbox"],
            headless: "new"
        });
    
        let lastError = null;
    
        for (const baseUrl of this.videoUrls) {
            const searchUrl = `${baseUrl}/search/${encodeURIComponent(keyword)}`;
            try {
                const page = await browser.newPage();
                await page.setUserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");
    
                // 拦截不必要的请求（如 CSS、字体）
                await page.setRequestInterception(true);
                page.on('request', req => {
                    if (['stylesheet', 'font'].includes(req.resourceType())) {
                        req.abort();
                    } else {
                        req.continue();
                    }
                });
    
                // 重试逻辑（3次）
                let retries = 3;
                while (retries--) {
                    try {
                        await page.goto(searchUrl, {
                            timeout: 60000,
                            waitUntil: "networkidle2"
                        });
                        break;
                    } catch (err) {
                        if (retries === 0) throw err;
                        await new Promise(r => setTimeout(r, 60000));
                    }
                }
    
                // 提取搜索结果（在浏览器环境中执行）
                const searchResults = await page.evaluate(() => {
                    const articles = Array.from(document.querySelectorAll('article'));
                    return articles.map(article => {
                        const titleElement = article.querySelector('h2.post-card-title');
                        const linkElement = article.querySelector('a[href^="/archives/"]');
                        
                        if (!titleElement || !linkElement) return null;
    
                        const link = linkElement.href;
                        const title = titleElement.textContent.trim();
                        const idMatch = link.match(/\/archives\/(\d+)/);
                        const id = idMatch ? idMatch[1] : null;
    
                        return id && title ? { id, title, link } : null;
                    }).filter(Boolean); // 过滤掉 null 值
                });
    
                if (searchResults.length === 0) {
                    throw new Error("未找到相关文章");
                }
    
                // 构建回复消息
                let replyMessage = `🔍 包含关键词 "${keyword}" 的文章搜索结果：\n\n`;
                searchResults.slice(0, 10).forEach((result, index) => {
                    replyMessage += `${index + 1}. **${result.title}**\n   📌 ID: ${result.id}\n  `;
                });
    
                await e.reply(replyMessage, false, {});
    
                // 只解析前5个搜索结果中的文章
                const topResults = searchResults.slice(0, 5);
                for (const result of topResults) {
                    await this.processVideoSearch({
                        ...e,
                        msg: `#吃瓜 ${result.id}`
                    });
                }
    
                await browser.close();
                return;
            } catch (error) {
                lastError = error;
                logger.error(`尝试 URL ${searchUrl} 失败:`, error);
            }
        }
    
        await browser.close();
        // await e.reply(`❌ 未找到相关文章，请稍后重试。错误信息: ${lastError?.message || "未知错误"}`, false, { at: true, recallMsg: 60 });
        await e.reply(`❌ 未找到相关文章，请稍后重试。错误信息: ${lastError?.message || "未知错误"}`, false, { at: true,  });
    }

    async getPastArticles(e) {
        const count = parseInt(e.msg.match(/^#?吃瓜(\d+)个往期$/)?.[1], 10);
        if (!count) return;

        // await e.reply(`正在获取 ${count} 个往期文章，请稍等...`, false, { at: true, recallMsg: 60 });
        await e.reply(`正在获取 ${count} 个往期文章，请稍等...`, false, { at: true,  });

        const browser = await puppeteer.launch({
            args: ["--no-sandbox", "--disable-setuid-sandbox"],
            headless: "new"
        });

        let lastError = null;

        // 尝试所有备用URL
        for (const baseUrl of this.videoUrls) {
            const archiveUrl = `${baseUrl}/archives.html`;
            try {
                const page = await browser.newPage();
                await page.setUserAgent(
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
                );

                // 允许图片加载
                await page.setRequestInterception(true);
                page.on('request', req => {
                    if (['stylesheet', 'font'].includes(req.resourceType())) {
                        req.abort();
                    } else {
                        req.continue();
                    }
                });

                // 重试逻辑（3次）
                let retries = 3;
                while (retries--) {
                    try {
                        await page.goto(archiveUrl, {
                            timeout: 60000,
                            waitUntil: "networkidle2"
                        });
                        break;
                    } catch (err) {
                        if (retries === 0) throw err;
                        await new Promise(r => setTimeout(r, 60000));
                    }
                }

                // 提取年份和文章链接
                const archiveInfo = await page.evaluate(() => {
                    const result = [];
                    const yearElements = document.querySelectorAll('h3');
                    yearElements.forEach(yearElement => {
                        const year = yearElement.textContent.trim();
                        const articleElements = yearElement.nextElementSibling.querySelectorAll('.brick a');
                        articleElements.forEach(article => {
                            const link = article.href;
                            const idMatch = link.match(/\/archives\/(\d+)/);
                            const id = idMatch ? idMatch[1] : null;
                            if (id) {
                                result.push({ year, id, link });
                            }
                        });
                    });
                    return result;
                });

                const pastArticles = archiveInfo.slice(0, count);

                if (pastArticles.length === 0) {
                    throw new Error("未找到往期文章");
                }

                // 构建回复消息
                let replyMessage = `以下是 ${count} 个往期文章的信息:\n`;
                pastArticles.forEach((article, index) => {
                    replyMessage += `${index + 1}. 标题: ${article.link}\n  ID: ${article.id}\n   `;
                });

                // await e.reply(replyMessage, false, { at: true, recallMsg: 60 });
                await e.reply(replyMessage, false, {});


                // 解析文章内容
                for (const article of pastArticles) {
                    await this.processVideoSearch({
                        ...e,
                        msg: `#吃瓜 ${article.id}`
                    });
                }

                await browser.close();
                return;
            } catch (error) {
                lastError = error;
                logger.error(`尝试URL ${archiveUrl} 失败:`, error);
            }
        }

        await browser.close();
        // await e.reply(`未找到往期文章，请稍后重试。错误信息: ${lastError.message}`, false, { at: true, recallMsg: 60 });
        await e.reply(`未找到往期文章，请稍后重试。错误信息: ${lastError.message}`, false, { at: true,  });
    }
}